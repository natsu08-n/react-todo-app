{"version":3,"sources":["ToDoListItem.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoListItem","this","props","title","description","className","Component","App","state","todoList","JSON","parse","localStorage","getItem","addTodo","item","callBack","setState","concat","setItem","stringify","removeTodo","filter","x","onSubmit","e","preventDefault","titleElement","target","elements","descriptionElement","value","id","placeholder","type","map","todo","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAoBeA,E,4JAhBb,WAAU,IAAD,EAKHC,KAAKC,MAHPC,EAFK,EAELA,MACAC,EAHK,EAGLA,YACGF,EAJE,uCAOP,OACE,8CAAKG,UAAU,gBAAmBH,GAAlC,cACE,qBAAKG,UAAU,qBAAf,SAAqCF,IACrC,qBAAKE,UAAU,2BAAf,SAA2CD,Y,GAXxBE,aCqGZC,E,4MA9FbC,MAAQ,CACNC,SAAUC,KAAKC,MAAMC,aAAaC,QAAQ,cAAgB,I,EAI5DC,QAAU,SAACC,EAAMC,GAEf,EAAKC,SACH,CACER,SAAU,EAAKD,MAAMC,SAASS,OAAOH,KAEvC,WAEEH,aAAaO,QAAQ,WAAYT,KAAKU,UAAU,EAAKZ,MAAMC,WAE3DO,GAAYA,Q,EAMlBK,WAAa,SAACN,EAAMC,GAClB,EAAKC,SACH,CACER,SAAU,EAAKD,MAAMC,SAASa,QAAO,SAAAC,GAAC,OAAIA,IAAMR,OAElD,WAEEH,aAAaO,QAAQ,WAAYT,KAAKU,UAAU,EAAKZ,MAAMC,WAE3DO,GAAYA,Q,4CAUlB,WAAU,IAAD,OACP,OACE,sBAAKX,UAAU,MAAf,UACE,wDACA,uBACEA,UAAU,WACVmB,SAAU,SAAAC,GAGRA,EAAEC,iBAEF,IAAMC,EAAeF,EAAEG,OAAOC,SAAT,MAEfC,EAAqBL,EAAEG,OAAOC,SAAT,YAE3B,EAAKf,QACH,CACIX,MAAOwB,EAAaI,MACpB3B,YAAa0B,EAAmBC,QAGpC,WACEJ,EAAaI,MAAQ,GACrBD,EAAmBC,MAAQ,OAnBnC,UAwBE,gCACE,uBAAOC,GAAG,QAAQC,YAAY,UAC9B,0BAAUD,GAAG,cAAcC,YAAY,mBAEzC,gCACE,wBAAQC,KAAO,SAAf,0BACA,2IAGJ,8BAEGjC,KAAKO,MAAMC,SAAS0B,KAAI,SAAAC,GAAI,OAC3B,cAAC,EAAD,CAEEjC,MAAOiC,EAAKjC,MACZC,YAAagC,EAAKhC,YAElBiC,QAAS,kBAAM,EAAKhB,WAAWe,KAJ1BA,EAAKjC,mB,GArFNG,aCMHgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f8aa0ae9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ToDoListItem.css';\n\nclass ToDoListItem extends Component {\n  render() {\n    const {\n      title,\n      description,\n      ...props\n    } = this.props;\n\n    return (\n      <div className=\"ToDoListItem\" {...props}>\n        <div className=\"ToDoListItem-title\">{title}</div>\n        <div className=\"ToDoListItem-description\">{description}</div>\n      </div>\n    );\n  }\n}\n\nexport default ToDoListItem;","import React, { Component } from 'react';\nimport './App.css';\nimport ToDoListItem from \"./ToDoListItem.js\"\n\n// Appという名称のコンポーネントの作成\n//import React from 'react';とした場合、extendsの次は React.Componentとする。\nclass App extends Component {\n\n  // ToDoListをstateに定義して初期値はlocalStorageから取得または[]\n  // （もしlocalStorageにtodoListと名付けたitemが存在するならlocalStorageから取得）\n  state = {\n    todoList: JSON.parse(localStorage.getItem(\"todoList\")) || []\n  }\n\n  // todoList itemの追加\n  addTodo = (item, callBack) => {\n    // todoList stateに追加\n    this.setState(\n      {\n        todoList: this.state.todoList.concat(item)\n      },\n      () => {\n        // localStorageにtodoList stateを保存\n        localStorage.setItem(\"todoList\", JSON.stringify(this.state.todoList))\n        // callBack関数が引数に渡されていた場合に実行\n        callBack && callBack()\n      }\n    )\n  }\n\n  // todoListからitemを削除\n  removeTodo = (item, callBack) => {\n    this.setState(\n      {\n        todoList: this.state.todoList.filter(x => x !== item)\n      },\n      () => {\n        // localStorageにtodoList stateを保存\n        localStorage.setItem(\"todoList\", JSON.stringify(this.state.todoList))\n        // callBack関数が引数に渡されていた場合に実行\n        callBack && callBack()\n      }\n    )\n  }\n\n\n\n\n\n  // renderメソッドでビューとなるJSXをreturnで返す\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>ToDoリスト</h2>\n        <form \n          className=\"App-form\"\n          onSubmit={e => {\n            // formのデフォルトイベントキャンセル\n            // (フォームが持つデフォルトの動作は、フォームの内容を指定したURLへ送信するという動作。form要素に送信先が指定されていない場合、現在のURLに対してフォームの内容を送信するのでこれをキャンセル。)\n            e.preventDefault();\n            // idがtitleのElement取得\n            const titleElement = e.target.elements[\"title\"];\n            // idがdescriptionのElementを取得\n            const descriptionElement = e.target.elements[\"description\"];\n\n            this.addTodo(\n              {\n                  title: titleElement.value,\n                  description: descriptionElement.value\n              },\n              // stateの変更後に入力した値を空にする\n              () => {\n                titleElement.value = \"\";\n                descriptionElement.value = \"\";\n              }\n            )\n          }}\n          >\n          <div>\n            <input id=\"title\" placeholder=\"title\" />\n            <textarea id=\"description\" placeholder=\"description\" />\n          </div>\n          <div>\n            <button type = \"submit\">登録</button>\n            <p>削除するには作成したToDoリストを押下</p>\n          </div>\n        </form>\n        <div>\n          {/* todoList配列の要素数分ToDoListItemコンポーネントを展開*/}\n          {this.state.todoList.map(todo => (\n            <ToDoListItem\n              key={todo.title}\n              title={todo.title}\n              description={todo.description}\n            // クリックされたItemをtodoList stateから削除\n              onClick={() => this.removeTodo(todo)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}